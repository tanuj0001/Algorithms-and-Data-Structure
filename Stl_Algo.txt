// int rotL=3;
// std::rotate(vec1.begin(), vec1.begin()+rotL, vec1.end());
// Rotate vector right 4 times.
// int rotR = 4;
// // std::rotate function
// std::rotate(vec2.begin(), vec2.begin()+vec2.size()-rotR, vec2.end());

//  Rotate casual code
// for (int i = 0; i < A.size(); i++) {
// 		ret.push_back(A[(i + B) % A.size()]);
// 	}


Split Function
// string input("geeks\tfor\tgeeks");
// vector<string> result;
// boost::split(result, input, boost::is_any_of("\t"));


convert a string to upper or lower function etc
// transform(s.begin(),s.end(),s.begin(),::toupper);
// int increment(int x) {  return (x+1); }
// transform(arr, arr+n, arr, increment);


//// modulo(m) multiplicative inverse of no
// it exit only if _gcd(n,m)=1
formula =>   a^m-2=a^-1 mod mod

